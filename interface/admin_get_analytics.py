import datetime

from aiogram import types

from configs.bot_configs import bot, main_menu_message, dp
from database.db_session import get_table, get_plots


async def get_analytics(message: types.Message):
    table_send_menu = types.InlineKeyboardMarkup(resize_keyboard=True)
    table_send_menu.add(types.InlineKeyboardButton("–í—ã–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="get_table"))
    table_send_menu.add(types.InlineKeyboardButton("–í—ã–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", callback_data="get_graph"))
    table_send_menu.add(
        types.InlineKeyboardButton("üè†–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_after_get_table_main_menu"))
    await message.answer("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–∏ÃÜ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=table_send_menu)


@dp.callback_query_handler(text="get_table")
async def send_analytics(call: types.CallbackQuery):
    doc = types.InputFile(get_table(), f'{datetime.datetime.now().date()} –æ—Ç—á–µ—Ç.xlsx')
    return await bot.send_document(call.message.chat.id, doc)


@dp.callback_query_handler(text="get_graph")
async def send_graphs(call: types.CallbackQuery):
    plot_names = ['–û—Ç–∑—ã–≤—ã –æ—Ç –≤—Ä–µ–º–µ–Ω–∏.png', '–û—Ç–∑—ã–≤—ã –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º.png',
                  '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ. –í–µ–±–∏–Ω–∞—Ä.png',
                  '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ. –í–µ–±–∏–Ω–∞—Ä –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º.png',
                  '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ. –ü—Ä–æ–≥—Ä–∞–º–º–∞.png'
        , '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º.png', '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ. –ü—Ä–µ–ø–æ–¥.png',
                  '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ. –ü—Ä–µ–ø–æ–¥ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º.png', "–û—Ç—Ä–∏—Ü.png",
                  "–û—Ç—Ä–∏—Ü –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º.png", "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ.png", "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏.png", '—á—Ç–æ—Ç–æ.png',
                  '—á—Ç–æ—Ç–æ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º.png']

    docs = types.MediaGroup()
    docs_1 = types.MediaGroup()
    for k, plot in enumerate(get_plots()):
        doc = types.InputFile(plot, plot_names[k])
        if k <= 9:
            docs.attach_document(doc)
        else:
            docs_1.attach_document(doc)
    await bot.send_media_group(call.message.chat.id, media=docs)
    return await bot.send_media_group(call.message.chat.id, media=docs_1)


@dp.callback_query_handler(text="back_after_get_table_main_menu")
async def back_after_get_table_main_menu(call: types.CallbackQuery):
    await call.message.delete()
    await main_menu_message(call, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 1)
