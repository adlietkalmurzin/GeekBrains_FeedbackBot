from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types

from configs.bot_configs import bot, main_menu_message, dp

from configs.models.checking_for_information.checking_for_information import is_informative
from configs.models.assessment_emotionality.assessment_emotionality import assessment_emotionality
from configs.models.identify_object.identify_object import identify_object

temporarily_dict = {}
temporarily_dict_feedback = {}


class Feedback(StatesGroup):
    readiness = State()
    question1 = State()
    question2 = State()
    question3 = State()
    question4 = State()
    question5 = State()


async def leave_review(message: [types.Message, types.CallbackQuery], state: FSMContext):
    back_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back_menu.add("üè†–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    if isinstance(message, types.Message):
        await message.answer("–ù–∞ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10,–Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –º–Ω–µ–Ω–∏–µ–º –æ –≤–µ–±–∏–Ω–∞—Ä–µ?",
                             reply_markup=back_menu)
    elif isinstance(message, types.CallbackQuery):
        await message.message.answer("–ù–∞ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10,–Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –º–Ω–µ–Ω–∏–µ–º –æ –≤–µ–±–∏–Ω–∞—Ä–µ?",
                                     reply_markup=back_menu)
    await state.set_state(Feedback.readiness)


@dp.message_handler(state=Feedback.readiness)
async def handle_evaluation(message: types.Message, state: FSMContext):
    if message.text == "üè†–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await main_menu_message(message, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                                         "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ", 0)
    else:
        try:
            readiness = int(message.text)
            if readiness < 1 or readiness > 10:
                raise ValueError
            await message.answer(f"–û –∫–∞–∫–æ–º –≤–µ–±–∏–Ω–∞—Ä–µ –í—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å?")
            await state.update_data(readiness=readiness)
            await state.set_state(Feedback.question1)
        except ValueError:
            await message.answer("‚ùå–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
            return


@dp.message_handler(state=Feedback.question1)
async def get_question1(message: types.Message, state: FSMContext):
    if message.text == "üè†–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await main_menu_message(message, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                                         "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", 0)
    else:
        question1_answer = message.text
        await message.answer("–ß—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ —Ç–µ–º–µ –≤–µ–±–∏–Ω–∞—Ä–∞ –∏ –ø–æ—á–µ–º—É?")
        await state.update_data(question1=question1_answer)
        await state.set_state(Feedback.question2)


@dp.message_handler(state=Feedback.question2)
async def get_question2(message: types.Message, state: FSMContext):
    if message.text == "üè†–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await main_menu_message(message, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                                         "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", 0)
    else:
        question2_answer = message.text
        await message.answer(
            "–ë—ã–ª–∏ –ª–∏ –º–æ–º–µ–Ω—Ç—ã –≤ –≤–µ–±–∏–Ω–∞—Ä–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–≤–∞–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞? –ú–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å –∏—Ö?")
        await state.update_data(question2=question2_answer)
        await state.set_state(Feedback.question3)


@dp.message_handler(state=Feedback.question3)
async def get_question3(message: types.Message, state: FSMContext):
    if message.text == "üè†–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await main_menu_message(message, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                                         "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", 0)
    else:
        question3_answer = message.text
        await message.answer(
            "–ö–∞–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –≤–µ–±–∏–Ω–∞—Ä–∞, –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏–∏ –∏ –∫–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã –±—ã –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏?")
        await state.update_data(question3=question3_answer)
        await state.set_state(Feedback.question4)


@dp.message_handler(state=Feedback.question4)
async def get_question4(message: types.Message, state: FSMContext):
    if message.text == "üè†–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await main_menu_message(message, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                                         "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", 0)
    else:
        question4_answer = message.text
        await message.answer(
            "–ï—Å—Ç—å –ª–∏ —Ç–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑—É—á–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö?")
        await state.update_data(question4=question4_answer)
        await state.set_state(Feedback.question5)


@dp.message_handler(state=Feedback.question5)
async def get_question5(message: types.Message, state: FSMContext):
    if message.text == "üè†–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await main_menu_message(message, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                                         "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", 0)
    else:
        readiness = (await state.get_data()).get('readiness')
        question1_answer = (await state.get_data()).get('question1')
        question2_answer = (await state.get_data()).get('question2')
        question3_answer = (await state.get_data()).get('question3')
        question4_answer = (await state.get_data()).get('question4')
        question5_answer = message.text
        final_feedback = f'{question1_answer} {question2_answer} {question3_answer} {question4_answer} {question5_answer}'

        relevant_score = is_informative(question2_answer) * coef['question2'] + is_informative(question3_answer) * coef['question3'] + is_informative(question4_answer) * coef['question4'] + is_informative(question5_answer) * coef['question5']
        object_ = identify_object(final_feedback)
        is_positive = assessment_emotionality(final_feedback)

        if int(readiness) >= READYNESS_THRESHOLD or relevant_score >= RELEVANT_SCORE_THRESHOLD:
            is_relevant = is_informative(final_feedback)
            send_to_base(question1_answer, question2_answer, question3_answer, question4_answer, question5_answer, is_relevant, object_, is_positive)

            if is_relevant:
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text="–ù–µ—Ç. –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                                        callback_data="main_menu"))
                keyboard.add(types.InlineKeyboardButton(text="–î–∞. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="send_feedback"))
                final_final_feedback = '–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–∑—ã–≤:\n\n' + f'{question1_answer}\n\n{question2_answer}\n\n{question3_answer}\n\n{question4_answer}\n\n{question5_answer}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?'
                await message.answer(final_final_feedback, reply_markup=keyboard)
                await state.update_data(question5=question5_answer, is_relevant=is_relevant, object_=object_, is_positive=is_positive)
            else:
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ –∑–∞–Ω–æ–≤–æ", callback_data="fill_feedback"))
                keyboard.add(types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
                await message.answer('–í–∞—à –æ—Ç–∑—ã–≤ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–µ–Ω', reply_markup=keyboard)
                await state.finish()


@dp.callback_query_handler(text="main_menu")
async def main_menu(call: types.CallbackQuery):
    await call.message.delete()
    await main_menu_message(call, "–û—Ç–∑—ã–≤ –ù–ï —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é\n", 0)


@dp.callback_query_handler(text="send_feedback")
async def send_feedback(call: types.CallbackQuery, state: FSMContext):
    question1_answer = (await state.get_data()).get('question1')
    question2_answer = (await state.get_data()).get('question2')
    question3_answer = (await state.get_data()).get('question3')
    question4_answer = (await state.get_data()).get('question4')
    question5_answer = (await state.get_data()).get('question5')
    final_feedback = f'{question1_answer} {question2_answer} {question3_answer} {question4_answer} {question5_answer}'

    is_relevant = (await state.get_data()).get('is_relevant')
    is_positive = (await state.get_data()).get('is_positive')
    object_ = (await state.get_data()).get('object_')

    send_to_base(question1_answer, question2_answer, question3_answer, question4_answer, question5_answer, is_relevant, object_, is_positive)

    await call.message.delete()
    await main_menu_message(call, "–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é\n", 0)


@dp.callback_query_handler(text="fill_feedback")
async def fill_feedback(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await leave_review(call, state)